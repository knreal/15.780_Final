# 2. group by days_left and average prices
df = aggregate(df$price, by=list(df$days_left), FUN=mean)
# 3. rename columns
names(df)[names(df) == "Group.1"] <- "days"
names(df)[names(df) == "x"] <- "price"
# 4. cast data as time series
price = ts(df$price)
# build model
am = auto.arima(price)
arimaorder(am)
# evaluate model
MAPE = function(actual, pred) {
percent_errors = abs(actual - pred) / abs(actual)
return(mean(percent_errors))
}
am.pred = as.vector(am$fitted)
am.actual = df$price
am.mape = MAPE(am.actual, am.pred)
ggtsdiag(am)
# forecast
forecast.am = forecast(am, h = 51, level = c(95))
autoplot(forecast.am) +
labs(x = "Days Left", y = "Price", title = "ARIMA Forecast of Price by Days Left") +
ylim(0,60000)
am.mape
# build model
es = HoltWinters(price, beta=FALSE, gamma=FALSE)
# evaluate model
plot.ts(price)
lines(es$fitted[,1], col="blue")
legend(x = "topright", legend=c("Actual", "Forecast"),
col=c("Black", "blue"), lty=1)
title("Holt-Winters Forecast of Price by Days Left")
es.pred = as.vector(es$fitted)
es.actual = df$price
es.mape = MAPE(es.actual, es.pred)
es.mape
# 6 total dataframes
# update df variable to set and run one dataset at a time
df = df_dm_e
head(df)
# visualize data:
# 1. scatterplot
plot(df$days_left, df$price)
# 2. line plot, average price by days_left
ggplot(df, aes(days_left, price)) + stat_summary(geom = "line", fun = mean) +
ggtitle("Average Price vs. Number of Days Before Flight")
# prepare data
# 1. drop unnecessary columns
df = subset(df[, c('days_left', 'price')])
# 2. group by days_left and average prices
df = aggregate(df$price, by=list(df$days_left), FUN=mean)
# 3. rename columns
names(df)[names(df) == "Group.1"] <- "days"
names(df)[names(df) == "x"] <- "price"
# 4. cast data as time series
price = ts(df$price)
# build model
am = auto.arima(price)
arimaorder(am)
am.pred = as.vector(am$fitted)
am.actual = df$price
am.mape = MAPE(am.actual, am.pred)
ggtsdiag(am)
# forecast
forecast.am = forecast(am, h = 51, level = c(95))
autoplot(forecast.am) +
labs(x = "Days Left", y = "Price", title = "ARIMA Forecast of Price by Days Left") +
ylim(0,15000)
am.mape
# build model
es = HoltWinters(price, beta=FALSE, gamma=FALSE)
# evaluate model
plot.ts(price)
lines(es$fitted[,1], col="blue")
legend(x = "topright", legend=c("Actual", "Forecast"),
col=c("Black", "blue"), lty=1)
title("Holt-Winters Forecast of Price by Days Left")
es.pred = as.vector(es$fitted)
es.actual = df$price
es.mape = MAPE(es.actual, es.pred)
es.mape
# 6 total dataframes
# update df variable to set and run one dataset at a time
df = df_dm_b
head(df)
# visualize data:
# 1. scatterplot
plot(df$days_left, df$price)
# 2. line plot, average price by days_left
ggplot(df, aes(days_left, price)) + stat_summary(geom = "line", fun = mean) +
ggtitle("Average Price vs. Number of Days Before Flight")
# prepare data
# 1. drop unnecessary columns
df = subset(df[, c('days_left', 'price')])
# 2. group by days_left and average prices
df = aggregate(df$price, by=list(df$days_left), FUN=mean)
# 3. rename columns
names(df)[names(df) == "Group.1"] <- "days"
names(df)[names(df) == "x"] <- "price"
# 4. cast data as time series
price = ts(df$price)
# build model
am = auto.arima(price)
arimaorder(am)
am.pred = as.vector(am$fitted)
am.actual = df$price
am.mape = MAPE(am.actual, am.pred)
ggtsdiag(am)
# forecast
forecast.am = forecast(am, h = 51, level = c(95))
autoplot(forecast.am) +
labs(x = "Days Left", y = "Price", title = "ARIMA Forecast of Price by Days Left") +
ylim(0,50000)
autoplot(forecast.am) +
labs(x = "Days Left", y = "Price", title = "ARIMA Forecast of Price by Days Left") +
ylim(40000,50000)
# build model
es = HoltWinters(price, beta=FALSE, gamma=FALSE)
# evaluate model
plot.ts(price)
lines(es$fitted[,1], col="blue")
legend(x = "topright", legend=c("Actual", "Forecast"),
col=c("Black", "blue"), lty=1)
title("Holt-Winters Forecast of Price by Days Left")
es.pred = as.vector(es$fitted)
es.actual = df$price
es.mape = MAPE(es.actual, es.pred)
es.mape
am.mape
# 6 total dataframes
# update df variable to set and run one dataset at a time
df = df_mm_e
# 6 total dataframes
# update df variable to set and run one dataset at a time
df = df_bm_e
head(df)
# visualize data:
# 1. scatterplot
plot(df$days_left, df$price)
# 2. line plot, average price by days_left
ggplot(df, aes(days_left, price)) + stat_summary(geom = "line", fun = mean) +
ggtitle("Average Price vs. Number of Days Before Flight")
# prepare data
# 1. drop unnecessary columns
df = subset(df[, c('days_left', 'price')])
# 2. group by days_left and average prices
df = aggregate(df$price, by=list(df$days_left), FUN=mean)
# 3. rename columns
names(df)[names(df) == "Group.1"] <- "days"
names(df)[names(df) == "x"] <- "price"
# 4. cast data as time series
price = ts(df$price)
# build model
am = auto.arima(price)
arimaorder(am)
am.pred = as.vector(am$fitted)
am.actual = df$price
am.mape = MAPE(am.actual, am.pred)
ggtsdiag(am)
# 2. line plot, average price by days_left
ggplot(df, aes(days_left, price)) + stat_summary(geom = "line", fun = mean) +
ggtitle("Average Price vs. Number of Days Before Flight")
# 6 total dataframes
# update df variable to set and run one dataset at a time
df = df_bm_e
head(df)
# visualize data:
# 1. scatterplot
plot(df$days_left, df$price)
# 2. line plot, average price by days_left
ggplot(df, aes(days_left, price)) + stat_summary(geom = "line", fun = mean) +
ggtitle("Average Price vs. Number of Days Before Flight")
# prepare data
# 1. drop unnecessary columns
df = subset(df[, c('days_left', 'price')])
# 2. group by days_left and average prices
df = aggregate(df$price, by=list(df$days_left), FUN=mean)
# 3. rename columns
names(df)[names(df) == "Group.1"] <- "days"
names(df)[names(df) == "x"] <- "price"
# 4. cast data as time series
price = ts(df$price)
# build model
am = auto.arima(price)
arimaorder(am)
am.pred = as.vector(am$fitted)
am.actual = df$price
am.mape = MAPE(am.actual, am.pred)
ggtsdiag(am)
# forecast
forecast.am = forecast(am, h = 51, level = c(95))
autoplot(forecast.am) +
labs(x = "Days Left", y = "Price", title = "ARIMA Forecast of Price by Days Left") +
ylim(0,12000)
# build model
es = HoltWinters(price, beta=FALSE, gamma=FALSE)
# evaluate model
plot.ts(price)
lines(es$fitted[,1], col="blue")
legend(x = "topright", legend=c("Actual", "Forecast"),
col=c("Black", "blue"), lty=1)
title("Holt-Winters Forecast of Price by Days Left")
es.pred = as.vector(es$fitted)
es.actual = df$price
es.mape = MAPE(es.actual, es.pred)
es.mape
am.mape
# 6 total dataframes
# update df variable to set and run one dataset at a time
df = df_bm_b
head(df)
# visualize data:
# 1. scatterplot
plot(df$days_left, df$price)
# 2. line plot, average price by days_left
ggplot(df, aes(days_left, price)) + stat_summary(geom = "line", fun = mean) +
ggtitle("Average Price vs. Number of Days Before Flight")
# prepare data
# 1. drop unnecessary columns
df = subset(df[, c('days_left', 'price')])
# 2. group by days_left and average prices
df = aggregate(df$price, by=list(df$days_left), FUN=mean)
# 3. rename columns
names(df)[names(df) == "Group.1"] <- "days"
names(df)[names(df) == "x"] <- "price"
# 4. cast data as time series
price = ts(df$price)
# build model
am = auto.arima(price)
arimaorder(am)
am.pred = as.vector(am$fitted)
am.actual = df$price
am.mape = MAPE(am.actual, am.pred)
ggtsdiag(am)
# forecast
forecast.am = forecast(am, h = 51, level = c(95))
autoplot(forecast.am) +
labs(x = "Days Left", y = "Price", title = "ARIMA Forecast of Price by Days Left") +
ylim(0,70000)
autoplot(forecast.am) +
labs(x = "Days Left", y = "Price", title = "ARIMA Forecast of Price by Days Left") +
ylim(50000,70000)
am.mape
# build model
es = HoltWinters(price, beta=FALSE, gamma=FALSE)
# evaluate model
plot.ts(price)
lines(es$fitted[,1], col="blue")
legend(x = "topright", legend=c("Actual", "Forecast"),
col=c("Black", "blue"), lty=1)
title("Holt-Winters Forecast of Price by Days Left")
es.pred = as.vector(es$fitted)
es.actual = df$price
es.mape = MAPE(es.actual, es.pred)
es.mape
# 6 total dataframes
# update df variable to set and run one dataset at a time
df = df_db_b
head(df)
# prepare data
# 1. drop unnecessary columns
df = subset(df[, c('days_left', 'price')])
# 2. group by days_left and average prices
df = aggregate(df$price, by=list(df$days_left), FUN=mean)
# 3. rename columns
names(df)[names(df) == "Group.1"] <- "days"
names(df)[names(df) == "x"] <- "price"
# 4. cast data as time series
price = ts(df$price)
# build model
am = auto.arima(price)
arimaorder(am)
# forecast
forecast.am = forecast(am, h = 51, level = c(95))
autoplot(forecast.am) +
labs(x = "Days Left", y = "Price", title = "ARIMA Forecast of Price by Days Left") +
ylim(40000,60000)
# prepare data
df = subset(df_dm_e, source_city == 'Delhi' &
destination_city == "Mumbai" &
stops == 0 &
duration > 1.83 | duration < 4.03)
df = subset(df[, c('days_left', 'price')])
df = aggregate(df$price, by=list(df$days_left), FUN=mean)
names(df)[names(df) == "Group.1"] <- "days"
names(df)[names(df) == "x"] <- "price"
price = ts(df$price)
# build model - es
model2 = HoltWinters(price, beta=FALSE, gamma=FALSE)
# forecast
plot.ts(price)
lines(model2$fitted[,1], col="blue")
legend(x = "topright", legend=c("Actual", "Forecast"),
col=c("Black", "blue"), lty=1)
title("Holt-Winters Forecast of Price by Days Left")
# evaluate model
model2.pred = as.vector(model2$fitted)
model2.actual = df$price
model2.mape = MAPE(model2.actual, model2.pred)
model2.mape
model2$fitted
predict(model2, 100)
predict(model2, range(50,101))
predict(model2, newdata=range(50,101))
predict(model2, newdata=c(100))
predict(model2, newdata=c(100), interval='confidence')
predict(model2, newdata=data.frame(days=100), interval='confidence')
predict(model2, n.ahead=51, prediction.interval=TRUE, level=0.95)
lines(predict(model2, n.ahead=51, prediction.interval=TRUE, level=0.95)[,1])
# 6 total dataframes
# update df variable to set and run one dataset at a time
df = df_db_e
# 2. line plot, average price by days_left
ggplot(df, aes(days_left, price)) + stat_summary(geom = "line", fun = mean) +
ggtitle("Average Price vs. Number of Days Before Flight")
# prepare data
# 1. drop unnecessary columns
df = subset(df[, c('days_left', 'price')])
# 2. group by days_left and average prices
df = aggregate(df$price, by=list(df$days_left), FUN=mean)
# 3. rename columns
names(df)[names(df) == "Group.1"] <- "days"
names(df)[names(df) == "x"] <- "price"
# 4. cast data as time series
price = ts(df$price)
# build model
am = auto.arima(price)
# forecast
forecast.am = forecast(am, h = 51, level = c(95))
autoplot(forecast.am) +
labs(x = "Days Left", y = "Price", title = "Delhi-Bangalore, Economy") +
ylim(0,13000)
# build model
es = HoltWinters(price, beta=FALSE, gamma=FALSE)
# evaluate model
plot.ts(price)
lines(es$fitted[,1], col="blue")
legend(x = "topright", legend=c("Actual", "Forecast"),
col=c("Black", "blue"), lty=1)
title("Delhi-Bangalore, Economy")
# 6 total dataframes
# update df variable to set and run one dataset at a time
df = df_db_b
# 2. line plot, average price by days_left
ggplot(df, aes(days_left, price)) + stat_summary(geom = "line", fun = mean) +
ggtitle("Average Price vs. Number of Days Before Flight")
# prepare data
# 1. drop unnecessary columns
df = subset(df[, c('days_left', 'price')])
# 2. group by days_left and average prices
df = aggregate(df$price, by=list(df$days_left), FUN=mean)
# 3. rename columns
names(df)[names(df) == "Group.1"] <- "days"
names(df)[names(df) == "x"] <- "price"
# 4. cast data as time series
price = ts(df$price)
# build model
am = auto.arima(price)
arimaorder(am)
# forecast
forecast.am = forecast(am, h = 51, level = c(95))
autoplot(forecast.am) +
labs(x = "Days Left", y = "Price", title = "Delhi-Bangalore, Business") +
ylim(40000,60000)
# build model
es = HoltWinters(price, beta=FALSE, gamma=FALSE)
# evaluate model
plot.ts(price)
lines(es$fitted[,1], col="blue")
legend(x = "topright", legend=c("Actual", "Forecast"),
col=c("Black", "blue"), lty=1)
title("Delhi-Bangalore, Business")
# 6 total dataframes
# update df variable to set and run one dataset at a time
df = df_dm_e
# 2. line plot, average price by days_left
ggplot(df, aes(days_left, price)) + stat_summary(geom = "line", fun = mean) +
ggtitle("Average Price vs. Number of Days Before Flight")
# prepare data
# 1. drop unnecessary columns
df = subset(df[, c('days_left', 'price')])
# 2. group by days_left and average prices
df = aggregate(df$price, by=list(df$days_left), FUN=mean)
# 3. rename columns
names(df)[names(df) == "Group.1"] <- "days"
names(df)[names(df) == "x"] <- "price"
# 4. cast data as time series
price = ts(df$price)
# build model
am = auto.arima(price)
# forecast
forecast.am = forecast(am, h = 51, level = c(95))
autoplot(forecast.am) +
labs(x = "Days Left", y = "Price", title = "Delhi-Mumbai, Economy") +
ylim(0,15000)
autoplot(forecast.am) +
labs(x = "Days Left", y = "Price", title = "Delhi-Mumbai, Economy") +
ylim(0,15000)
# build model
es = HoltWinters(price, beta=FALSE, gamma=FALSE)
# evaluate model
plot.ts(price)
lines(es$fitted[,1], col="blue")
legend(x = "topright", legend=c("Actual", "Forecast"),
col=c("Black", "blue"), lty=1)
title("Delhi-Mumbai, Economy")
# 6 total dataframes
# update df variable to set and run one dataset at a time
df = df_dm_b
# 2. line plot, average price by days_left
ggplot(df, aes(days_left, price)) + stat_summary(geom = "line", fun = mean) +
ggtitle("Average Price vs. Number of Days Before Flight")
# prepare data
# 1. drop unnecessary columns
df = subset(df[, c('days_left', 'price')])
# 2. group by days_left and average prices
df = aggregate(df$price, by=list(df$days_left), FUN=mean)
# 3. rename columns
names(df)[names(df) == "Group.1"] <- "days"
names(df)[names(df) == "x"] <- "price"
# 4. cast data as time series
price = ts(df$price)
# build model
am = auto.arima(price)
# forecast
forecast.am = forecast(am, h = 51, level = c(95))
autoplot(forecast.am) +
labs(x = "Days Left", y = "Price", title = "Delhi-Mumbai, Business") +
ylim(40000,50000)
# build model
es = HoltWinters(price, beta=FALSE, gamma=FALSE)
# evaluate model
plot.ts(price)
lines(es$fitted[,1], col="blue")
legend(x = "topright", legend=c("Actual", "Forecast"),
col=c("Black", "blue"), lty=1)
title("Delhi-Mumbai, Business")
# 6 total dataframes
# update df variable to set and run one dataset at a time
df = df_bm_e
# 2. line plot, average price by days_left
ggplot(df, aes(days_left, price)) + stat_summary(geom = "line", fun = mean) +
ggtitle("Average Price vs. Number of Days Before Flight")
# prepare data
# 1. drop unnecessary columns
df = subset(df[, c('days_left', 'price')])
# 2. group by days_left and average prices
df = aggregate(df$price, by=list(df$days_left), FUN=mean)
# 3. rename columns
names(df)[names(df) == "Group.1"] <- "days"
names(df)[names(df) == "x"] <- "price"
# 4. cast data as time series
price = ts(df$price)
# build model
am = auto.arima(price)
# forecast
forecast.am = forecast(am, h = 51, level = c(95))
autoplot(forecast.am) +
labs(x = "Days Left", y = "Price", title = "Delhi-Mumbai, Business") +
ylim(0,12000)
autoplot(forecast.am) +
labs(x = "Days Left", y = "Price", title = "Bangalore-Mumbai, Economy") +
ylim(0,12000)
# build model
es = HoltWinters(price, beta=FALSE, gamma=FALSE)
# evaluate model
plot.ts(price)
lines(es$fitted[,1], col="blue")
legend(x = "topright", legend=c("Actual", "Forecast"),
col=c("Black", "blue"), lty=1)
title("Bangalore-Mumbai, Economy")
# 2. line plot, average price by days_left
ggplot(df, aes(days_left, price)) + stat_summary(geom = "line", fun = mean) +
ggtitle("Average Price vs. Number of Days Before Flight")
# 6 total dataframes
# update df variable to set and run one dataset at a time
df = df_bm_b
# 2. line plot, average price by days_left
ggplot(df, aes(days_left, price)) + stat_summary(geom = "line", fun = mean) +
ggtitle("Average Price vs. Number of Days Before Flight")
# prepare data
# 1. drop unnecessary columns
df = subset(df[, c('days_left', 'price')])
# 2. group by days_left and average prices
df = aggregate(df$price, by=list(df$days_left), FUN=mean)
# 3. rename columns
names(df)[names(df) == "Group.1"] <- "days"
names(df)[names(df) == "x"] <- "price"
# 4. cast data as time series
price = ts(df$price)
# build model
am = auto.arima(price)
# forecast
forecast.am = forecast(am, h = 51, level = c(95))
autoplot(forecast.am) +
labs(x = "Days Left", y = "Price", title = "Bangalore-Mumbai, Economy") +
ylim(60000,70000)
autoplot(forecast.am) +
labs(x = "Days Left", y = "Price", title = "Bangalore-Mumbai, Business") +
ylim(60000,70000)
autoplot(forecast.am) +
labs(x = "Days Left", y = "Price", title = "Bangalore-Mumbai, Business") +
ylim(55000,70000)
# build model
es = HoltWinters(price, beta=FALSE, gamma=FALSE)
# evaluate model
plot.ts(price)
lines(es$fitted[,1], col="blue")
legend(x = "topright", legend=c("Actual", "Forecast"),
col=c("Black", "blue"), lty=1)
title("Bangalore-Mumbai, Business")
